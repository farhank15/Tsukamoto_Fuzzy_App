// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/academic/interface.go

// Package academic is a generated GoMock package.
package academic

import (
	context "context"
	http "net/http"
	reflect "reflect"
	models "tsukamoto/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAcademicRepository is a mock of AcademicRepository interface.
type MockAcademicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAcademicRepositoryMockRecorder
}

// MockAcademicRepositoryMockRecorder is the mock recorder for MockAcademicRepository.
type MockAcademicRepositoryMockRecorder struct {
	mock *MockAcademicRepository
}

// NewMockAcademicRepository creates a new mock instance.
func NewMockAcademicRepository(ctrl *gomock.Controller) *MockAcademicRepository {
	mock := &MockAcademicRepository{ctrl: ctrl}
	mock.recorder = &MockAcademicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcademicRepository) EXPECT() *MockAcademicRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAcademicRepository) Create(ctx context.Context, academic models.Academic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, academic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAcademicRepositoryMockRecorder) Create(ctx, academic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAcademicRepository)(nil).Create), ctx, academic)
}

// GetAll mocks base method.
func (m *MockAcademicRepository) GetAll(ctx context.Context) ([]models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAcademicRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAcademicRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockAcademicRepository) GetByID(ctx context.Context, id int) (*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAcademicRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAcademicRepository)(nil).GetByID), ctx, id)
}

// GetByStudentID mocks base method.
func (m *MockAcademicRepository) GetByStudentID(ctx context.Context, studentID uint) ([]models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", ctx, studentID)
	ret0, _ := ret[0].([]models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID.
func (mr *MockAcademicRepositoryMockRecorder) GetByStudentID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockAcademicRepository)(nil).GetByStudentID), ctx, studentID)
}

// Update mocks base method.
func (m *MockAcademicRepository) Update(ctx context.Context, id int, academic models.Academic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, academic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAcademicRepositoryMockRecorder) Update(ctx, id, academic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAcademicRepository)(nil).Update), ctx, id, academic)
}

// MockAcademicHandler is a mock of AcademicHandler interface.
type MockAcademicHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAcademicHandlerMockRecorder
}

// MockAcademicHandlerMockRecorder is the mock recorder for MockAcademicHandler.
type MockAcademicHandlerMockRecorder struct {
	mock *MockAcademicHandler
}

// NewMockAcademicHandler creates a new mock instance.
func NewMockAcademicHandler(ctrl *gomock.Controller) *MockAcademicHandler {
	mock := &MockAcademicHandler{ctrl: ctrl}
	mock.recorder = &MockAcademicHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcademicHandler) EXPECT() *MockAcademicHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAcademicHandler) Create(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", w, r)
}

// Create indicates an expected call of Create.
func (mr *MockAcademicHandlerMockRecorder) Create(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAcademicHandler)(nil).Create), w, r)
}

// GetAll mocks base method.
func (m *MockAcademicHandler) GetAll(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAll", w, r)
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAcademicHandlerMockRecorder) GetAll(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAcademicHandler)(nil).GetAll), w, r)
}

// GetByStudentID mocks base method.
func (m *MockAcademicHandler) GetByStudentID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetByStudentID", w, r)
}

// GetByStudentID indicates an expected call of GetByStudentID.
func (mr *MockAcademicHandlerMockRecorder) GetByStudentID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockAcademicHandler)(nil).GetByStudentID), w, r)
}

// Update mocks base method.
func (m *MockAcademicHandler) Update(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", w, r)
}

// Update indicates an expected call of Update.
func (mr *MockAcademicHandlerMockRecorder) Update(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAcademicHandler)(nil).Update), w, r)
}
