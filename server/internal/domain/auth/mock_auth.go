// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/auth/interface.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	http "net/http"
	reflect "reflect"
	models "tsukamoto/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateAcademic mocks base method.
func (m *MockAuthRepository) CreateAcademic(ctx context.Context, academic *models.Academic) (*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcademic", ctx, academic)
	ret0, _ := ret[0].(*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcademic indicates an expected call of CreateAcademic.
func (mr *MockAuthRepositoryMockRecorder) CreateAcademic(ctx, academic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcademic", reflect.TypeOf((*MockAuthRepository)(nil).CreateAcademic), ctx, academic)
}

// CreateUniversity mocks base method.
func (m *MockAuthRepository) CreateUniversity(ctx context.Context, university *models.University) (*models.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniversity", ctx, university)
	ret0, _ := ret[0].(*models.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUniversity indicates an expected call of CreateUniversity.
func (mr *MockAuthRepositoryMockRecorder) CreateUniversity(ctx, university interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniversity", reflect.TypeOf((*MockAuthRepository)(nil).CreateUniversity), ctx, university)
}

// CreateUser mocks base method.
func (m *MockAuthRepository) CreateUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepository)(nil).CreateUser), ctx, user)
}

// GetAllUniversities mocks base method.
func (m *MockAuthRepository) GetAllUniversities(ctx context.Context) ([]models.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUniversities", ctx)
	ret0, _ := ret[0].([]models.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUniversities indicates an expected call of GetAllUniversities.
func (mr *MockAuthRepositoryMockRecorder) GetAllUniversities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUniversities", reflect.TypeOf((*MockAuthRepository)(nil).GetAllUniversities), ctx)
}

// GetUniversityByID mocks base method.
func (m *MockAuthRepository) GetUniversityByID(ctx context.Context, id int) (*models.University, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniversityByID", ctx, id)
	ret0, _ := ret[0].(*models.University)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniversityByID indicates an expected call of GetUniversityByID.
func (mr *MockAuthRepositoryMockRecorder) GetUniversityByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniversityByID", reflect.TypeOf((*MockAuthRepository)(nil).GetUniversityByID), ctx, id)
}

// GetUserAcademic mocks base method.
func (m *MockAuthRepository) GetUserAcademic(ctx context.Context, userID int) (*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAcademic", ctx, userID)
	ret0, _ := ret[0].(*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAcademic indicates an expected call of GetUserAcademic.
func (mr *MockAuthRepositoryMockRecorder) GetUserAcademic(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAcademic", reflect.TypeOf((*MockAuthRepository)(nil).GetUserAcademic), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockAuthRepository) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockAuthRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByUsername), ctx, username)
}

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// GetUniversities mocks base method.
func (m *MockAuthHandler) GetUniversities(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUniversities", w, r)
}

// GetUniversities indicates an expected call of GetUniversities.
func (mr *MockAuthHandlerMockRecorder) GetUniversities(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniversities", reflect.TypeOf((*MockAuthHandler)(nil).GetUniversities), w, r)
}

// Login mocks base method.
func (m *MockAuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", w, r)
}

// Login indicates an expected call of Login.
func (mr *MockAuthHandlerMockRecorder) Login(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthHandler)(nil).Login), w, r)
}

// Register mocks base method.
func (m *MockAuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w, r)
}

// Register indicates an expected call of Register.
func (mr *MockAuthHandlerMockRecorder) Register(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthHandler)(nil).Register), w, r)
}
